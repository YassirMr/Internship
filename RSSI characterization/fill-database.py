#This script will take the resulting RSSI files generated by the radiomap.py script and will populate the database accordignly.

import sqlite3
import datetime
from argparse import ArgumentParser


conn = sqlite3.connect('my_database.db')
now = datetime.datetime.now()
 
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS input(
     id INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE,
     day TEXT,
     node_sender INTEGER,
     node_receiver INTEGER,
     frequency INTEGER,
     transmission_power INTEGER,
     rate INTEGER,
     Rss_mrc REAL,
     Rss_ant0 REAL,
     Rss_ant1 REAL,
     Rss_ant2 REAL,
     noise INTEGER
)
''')
F = 2412
Tx=1400
r=6
parser = ArgumentParser()
parser.add_argument("-f", "--freq", default=F, type=int,
                    help="specify the frequency, default={}"
                         .format(F))
parser.add_argument("-T", "--power", default=Tx, type=int,
                    help="specify the transmission power, default={}"
                         .format(Tx))
parser.add_argument("-r", "--rate", default=r, type=int,
                    help="specify the rate default={}"
                         .format(Tx))

args = parser.parse_args()

day = "{}/{}:{}-{}".format(now.day,now.month,now.hour,now.minute)

for n_s in range(1,38):
  for n_r in range(1,38):
    file1 = "./trace-freq{}-T{}-r{}-a7-t1-i0.008-S64-N100/rssi-{}.txt".format(args.freq,args.power,args.rate,n_r)
    file2 = "./trace-freq{}-T{}-r{}-a7-t1-i0.008-S64-N100/noise{}.txt".format(args.freq,args.power,args.rate,n_r)
    fin1 = open(file1 , "r")
    fin2= open(file2 , "r")
    wanted = fin1.readlines()
    wanted2 = fin2.readlines()
    cursor.execute("INSERT INTO input(day, node_sender, node_receiver,frequency,transmission_power,rate,Rss_mrc,Rss_ant0,Rss_ant1,Rss_ant2,noise) VALUES(?,?,?,?,?,?,?,?,?,?,?)",(day,n_s,n_r,args.freq,int(args.power/100),args.rate,float(wanted[n_s-1].split()[2]),float(wanted[n_s-1].split()[3]),float(wanted[n_s-1].split()[4]),float(wanted[n_s-1].split()[5]),wanted2[n_s-1].split()[1]))
  conn.commit()

conn.close()
