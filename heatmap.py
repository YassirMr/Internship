#given the node, transmission power, which antenna to use and specifying if the node is the sender or the receiver it will draw a heatmap
#this script is a completition of thiery's, therfore if needs the rssi files generated by his script

from argparse import ArgumentParser
import plotly.plotly as py
import plotly.graph_objs as go
py.sign_in('Tyassir', 'b1e2iknihbnk6p8mavP7')

ant = 'all' #antenna taken
Tx = 1400  #transmission power
n = 1  #node number
dict = {'all' : 2, 'ant0' : 3, 'ant1': 4, 'ant2': 5 }  #where to start reading values of rssi depending on the antenna wanted
 
parser = ArgumentParser()
parser.add_argument("-n", "--node", default=n, type=int,
                    help="specify the node number, default={}"
                         .format(n))
parser.add_argument("-Tx", "--power", default=Tx, type=int,
                    help="specify a transmission power, default={}"
                         .format(Tx))
parser.add_argument("-a", "--antenna", default=ant, choices=['all','ant0','ant1','ant2'],
                    help="specify which antenna, default={}".format(ant))
parser.add_argument("-sr", "--way", default='s', choices=['s','r'],
                    help="specify if sender or receiver"
                         )
args = parser.parse_args()
lines = []
if args.way=='s':
  for d in range(1,38):
   file = "./trace-T{}-r1-a7-t1-i0.008-S64-N100/rssi-{}.txt".format(args.power,d)  #local path
   fin = open(file , "r")
   wanted = fin.readlines()
   lines.append(wanted[args.node-1].split()[dict[args.antenna]])     #read row number node-id, that contains the power received by all nodes 1..37 from the sending node (e.g. node 1 sends in  #the first line of each rssi file)
elif args.way=='r':
  file = "./trace-T{}-r1-a7-t1-i0.008-S64-N100/rssi-{}.txt".format(args.power,args.node)
  fin=open(file , "r")
  l =fin.readlines()     #read all rows in the rssi-id file that contains power received from all nodes
  for line in l:
   lines.append(line.split()[dict[args.antenna]])
else:
 print('Please specify if sender or receiver')


if args.way=='s':  #replace the empty row with a useful information
 lines[args.node-1] = "Sender"
else:
 lines[args.node-1] = "Receiver"
data = go.Heatmap(  #making a heatmap using plotly library (values are put in rows)
z= [
["{}".format(lines[4]), "{}".format(lines[9]),"{}".format(lines[14]),"","","","{}".format(lines[29]),"{}".format(lines[34]),"{}".format(lines  [36])], ["{}".format(lines[3]),"{}".format(lines[8]),"{}".format(lines[13]),"{}".format(lines[17]),"{}".format(lines[21]),"{}".format(lines[24]),"{}".format(lines[28]),"{}".format(lines[33]),"{}".format(lines[35])],
["{}".format(lines[2]),"{}".format(lines[7]),"{}".format(lines[12]),"{}".format(lines[16]),"{}".format(lines[20]),"{}".format(lines[23]),"{}".format(lines[27]),"{}".format(lines[32]),""],
["{}".format(lines[1]),"{}".format(lines[6]),"{}".format(lines[11]),"","{}".format(lines[19]),"","{}".format(lines[26]),"{}".format(lines[31]),""],
["{}".format(lines[0]),"{}".format(lines[5]),"{}".format(lines[10]),"{}".format(lines[15]),"{}".format(lines[18]),"{}".format(lines[22]),"{}".format(lines[25]),"{}".format(lines[30]),""]
]
)

trace = go.Scatter(  #displaying text (values), each couple (x,y) has a corresponding text value (x1,y1,text1) ainsi de suite
x = [0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8,0,1,2,3,4,5,6,7,8],
y = [0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4],
mode= 'text',
text = ["{}".format(lines[4]), "{}".format(lines[9]),"{}".format(lines[14]),"","","","{}".format(lines[29]),"{}".format(lines[34]),"{}".format(lines  [36]), "{}".format(lines[3]),"{}".format(lines[8]),"{}".format(lines[13]),"{}".format(lines[17]),"{}".format(lines[21]),"{}".format	(lines[24]),"{}".format(lines[28]),"{}".format(lines[33]),"{}".format(lines[35]),
"{}".format(lines[2]),"{}".format(lines[7]),"{}".format(lines[12]),"{}".format(lines[16]),"{}".format(lines[20]),"{}".format(lines[23]),"{}".format(lines[27]),"{}".format(lines[32]),"",
"{}".format(lines[1]),"{}".format(lines[6]),"{}".format(lines[11]),"","{}".format(lines[19]),"","{}".format(lines[26]),"{}".format(lines[31]),"",
"{}".format(lines[0]),"{}".format(lines[5]),"{}".format(lines[10]),"{}".format(lines[15]),"{}".format(lines[18]),"{}".format(lines[22]),"{}".format(lines[25]),"{}".format(lines[30]),""]
)
D = [data, trace]

fig = go.Figure(data=D)
py.plot(fig, filename="node{} sender, ant={}, T={} dBm".format(args.node,args.antenna,int(args.power/100)))
